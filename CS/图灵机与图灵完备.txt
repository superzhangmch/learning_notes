若某物图灵完备，则足够强大。证明某东西完备，一般方法是：用它可以实现图灵机，或可以实现类似的一个比较简单的图灵完备的东西（比如 brainfuck）。

【程序不在纸带上】
关于图灵机：图灵机的程序（或者说转移函数）不是写在纸带上的。在图灵机的模型中，纸带（通常被称为带子）用于存储输入、输出以及计算过程中的中间状态，而程序本身，即定义图灵机如何根据当前读取的符号和机器的当前状态来改变状态、写入符号、移动读写头的规则，是固定的，不存储在纸带上。
图灵机的程序是图灵机定义不可分割的一部分，通常被理解为图灵机的"控制器"或"控制单元"。这个控制器根据转移函数（transition function）或转移表（transition table）的规则来操作。转移函数描述了图灵机的所有可能状态、可能的输入符号、如何基于这些状态和输入符号改变状态、如何写入新的符号到带子上，以及读写头的移动方向（左、右或不动）。
因此，可以将图灵机想象为由三部分组成：一个无限长的可读写的纸带（作为存储和输入/输出），一个读写头（用于读取和写入符号，以及在纸带上移动），以及一个控制单元（包含图灵机的"程序"，即转移函数）。这种设计使得图灵机成为了一个极其强大的抽象计算模型，能够模拟任何计算过程。

【转移表/转移函数是随着问题而变的，因为转移表就是“程序”】
图灵机的转移表（或转移函数）是可以变化的，它并不是固定的一个。不同的问题需要不同的转移表来解决。转移表是图灵机程序的核心，它定义了图灵机在遇到特定状态和读取特定符号时应该如何行动，包括写入的符号、读写头的移动方向（左、右或停留不动），以及转移到的新状态。
简单来说，转移表是图灵机的“大脑”，控制着图灵机的所有操作。对于不同的计算任务，你需要设计不同的转移表来指导图灵机如何完成任务。这就像编程语言中的不同程序一样，每个程序都有其特定的指令和逻辑来解决特定的问题。
例如，如果你想用图灵机来实现简单的加法运算，你需要设计一个转移表来指导图灵机如何识别两个数字的位置、如何进行计数以及如何输出结果。而如果你想要图灵机来识别某个字符串是否为回文，你就需要一个完全不同的转移表来实现这个逻辑。

