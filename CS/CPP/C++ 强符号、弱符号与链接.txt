# C/C++: 强符号、弱符号与链接

本文就简短点说,具体可以参见《深入理解计算机系统》一书.

编译器变异出的.o 或.a 库当然还没法直接运行, 他们只是提供了可执行二进制,一些全局变量等的存储, 以及提供了这些的符号表供链接(link)之用而已. 
当所有的.o 或.a 都已经编译出来,下一步就是link. 
如果link出错,那么可能的原因有两个:
1. 变量(函数)没定义,符号(symbol)找不到
2. 变量(函数)多次定义,符号冲突

上面这是从最宏观角度看.实际上,符号存不存在,冲不冲突等等这些符号的查找与匹配,是很复杂的.首先就是每个符号都属于不同的符号类型. 
这个可以用 nm 命令查看符号的类型. 用 nm 可以看到好多类型. 
其实,别管那么多, 只分为两种: 强类型与弱类型.
link 时候, 对同名的强弱符号的处理规则是:
1. 同名符号中, 最多一个强符号(否则,变异错误)
2. 多个同名符号有强的,有弱的, 那么把强的那个link进去
3. 如果多个同名符号都是弱的,那么随便link哪个都行.
另外,如果不管强的还是弱的,都找不到,那么当然就是接下来编译出错了.

因此需要一个判断强弱的标准.其实很简单,因为这些符号是提供给外部用的,所以肯定都是全局的一些东西:比如全局变量, 全局的函数, 类的成员函数等.
规则如下:
1. 函数是强符号
2. 有初始化的变量是强符号
3. 无初始化的变量是弱符号
4. 成员函数如果定义在类里面,那么是弱符号(用 nm 可以查看到确实是)
5. 成员函数如果定义在类外面,那么是强符号
6. 模板类中的成员函数无论定义在类内还是类外,都是弱类型(非特别说明,本文中类都是非模板类)[nm 验证]
7. 模板函数是弱类型[亲验]
8. 模板函数的特化版本是强的 [亲验]

由此,可以知道为什么成员函数定义在头文件中的时候,为什么不会导致链接问题(假如这个头文件被多个.cppinclude, 每个cpp都调用到了这个成员函数,那么相应的每个.o 里都有这个成员函数的二进制代码, link完成后,肯定只能剩下一份, 那么这有好几份,岂不冲突! 正是由于这个强弱性, 所以才没事.)
从 6 也可见,如果不这样, 那么模板的所有内容都必须放到同一个文件中, 就不可能实现了.
